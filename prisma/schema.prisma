// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  role          Role      @default(STAFF)
  accounts      Account[]
  sessions      Session[]
  shifts        Shift[]
  swapRequests  SwapRequest[]  @relation("RequestedBy")
  leaveRequests LeaveRequest[]
  attendances   Attendance[]
  createdShifts Shift[] @relation("CreatedShifts")
}

model Shift {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Shift details
  startTime   DateTime
  endTime     DateTime
  type        ShiftType
  status      ShiftStatus @default(SCHEDULED)
  notes       String?
  
  // Relations
  userId      String?     // Optional because shift might be unassigned
  user        User?       @relation(fields: [userId], references: [id])
  createdById String      // Manager who created the shift
  createdBy   User        @relation("CreatedShifts", fields: [createdById], references: [id])

  @@index([userId])
  @@index([createdById])
  SwapRequest SwapRequest[] @relation("OriginalShift")
}

model SwapRequest {
  id              String        @id @default(cuid())
  requestedBy     User          @relation("RequestedBy", fields: [requestedById], references: [id])
  requestedById   String
  originalShift   Shift         @relation("OriginalShift", fields: [originalShiftId], references: [id])
  originalShiftId String
  targetUserId    String?
  status          RequestStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model LeaveRequest {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  startDate DateTime
  endDate   DateTime
  reason    String?
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Attendance {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  clockIn  DateTime
  clockOut DateTime?
  date     DateTime  @default(now())
}

enum Role {
  STAFF
  MANAGER
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum ShiftType {
  MORNING
  AFTERNOON
  NIGHT
  CUSTOM
}

enum ShiftStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
